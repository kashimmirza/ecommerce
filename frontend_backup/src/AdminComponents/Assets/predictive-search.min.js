/** @format */

import React, { useEffect, useRef, useState } from "react";

const PredictiveSearch = () => {
 const containerRef = useRef(null);
 const inputRef = useRef(null);
 const [query, setQuery] = useState("");
 const [results, setResults] = useState("");
 const [isOpen, setIsOpen] = useState(false);
 const [loading, setLoading] = useState(false);
 const [cachedResults, setCachedResults] = useState({});
 const [currentVal, setCurrentVal] = useState("*");
 const [resultsMaxHeight, setResultsMaxHeight] = useState(null);

 const debounce = (func, delay) => {
  let timer;
  return (...args) => {
   clearTimeout(timer);
   timer = setTimeout(() => {
    func(...args);
   }, delay);
  };
 };

 const getQuery = () => {
  let q = inputRef.current?.value.trim() || "";
  if (currentVal && currentVal !== "*") {
   q = `product_type:${currentVal} AND ${q}`;
  }
  return q;
 };

 const handleInputChange = debounce(() => {
  const q = getQuery();
  setQuery(q);
  if (!q) {
   close(true);
   return;
  }
  fetchResults(q);
 }, 300);

 const fetchResults = async (q) => {
  if (cachedResults[q]) {
   setResults(cachedResults[q]);
   setIsOpen(true);
   return;
  }
  setLoading(true);
  try {
   const res = await fetch(
    `/search_url/?q=${encodeURIComponent(q)}&section_id=predictive-search`,
   );
   const text = await res.text();
   const html = new DOMParser().parseFromString(text, "text/html");
   const content = html.querySelector(
    "#shopify-section-predictive-search",
   )?.innerHTML;
   setCachedResults((prev) => ({ ...prev, [q]: content }));
   setResults(content);
   setIsOpen(true);
  } catch (error) {
   console.error("Search error:", error);
   close();
  } finally {
   setLoading(false);
  }
 };

 const close = (clear = false) => {
  if (clear) {
   inputRef.current.value = "";
   setQuery("");
  }
  setIsOpen(false);
  setResults("");
  setResultsMaxHeight(null);
 };

 const handleFocus = () => {
  const q = getQuery();
  if (q.length) {
   fetchResults(q);
  }
 };

 const handleFocusOut = () => {
  setTimeout(() => {
   if (!containerRef.current.contains(document.activeElement)) {
    close();
   }
  }, 100);
 };

 const getResultsMaxHeight = () => {
  const header = document.querySelector(".t4s-section-header");
  return window.innerHeight - (header?.getBoundingClientRect().bottom || 0);
 };

 useEffect(() => {
  if (isOpen) {
   setResultsMaxHeight(getResultsMaxHeight());
  }
 }, [isOpen]);

 return (
  <div
   className="predictive-search-container"
   ref={containerRef}
   onFocus={handleFocus}
   onBlur={handleFocusOut}
   data-predictive-search
  >
   <form onSubmit={(e) => e.preventDefault()}>
    <input
     type="search"
     ref={inputRef}
     onInput={handleInputChange}
     placeholder="Search..."
     aria-expanded={isOpen}
    />
   </form>
   {loading && <div className="skeleton">Loading...</div>}
   {isOpen && (
    <div
     className="search-results"
     style={{ maxHeight: resultsMaxHeight }}
     dangerouslySetInnerHTML={{ __html: results }}
    />
   )}
  </div>
 );
};

export default PredictiveSearch;
